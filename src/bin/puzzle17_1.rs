use std::{
    collections::{HashMap, HashSet},
    ops::Sub,
};

#[derive(Debug, Hash, PartialEq, Eq, Clone, Copy)]
struct Coord {
    x: u32,
    y: u32,
}

type HasMoved = Option<()>;

impl Coord {
    fn new(x: u32, y: u32) -> Self {
        Coord { x: x, y: y }
    }

    fn displace_left(&self) -> Option<Coord> {
        match self.x.checked_sub(1) {
            Some(x_new) => match x_new {
                0 => None,
                _ => Some(Coord::new(x_new, self.y)),
            },
            None => None,
        }
    }
    fn displace_right(&self) -> Option<Coord> {
        match self.x.checked_add(1) {
            Some(x_new) => match x_new {
                8 => None,
                _ => Some(Coord::new(x_new, self.y)),
            },
            None => None,
        }
    }
    fn displace_down(&self) -> Option<Coord> {
        match self.y.checked_sub(1) {
            Some(y_new) => match y_new {
                0 => None,
                _ => Some(Coord::new(self.x, y_new)),
            },
            None => None,
        }
    }
}

enum JetDirection {
    Left,
    Right,
}

#[derive(Debug, Clone, Copy)]
enum RockShape {
    Minus,
    Plus,
    LShaped,
    Bar,
    Square,
}

struct Rock {
    coords: Vec<Coord>, // Allows for the iter_mut method that HashSet doesn't.
    shape: RockShape,
}

impl Rock {
    fn new(shape: RockShape, datum: u32) -> Self {
        let bottom_y = datum + 4;
        let left_x = 3;
        match shape {
            RockShape::Minus => {
                let mut coords = Vec::new();
                for (x, y) in vec![
                    (left_x, bottom_y),
                    (left_x + 1, bottom_y),
                    (left_x + 2, bottom_y),
                    (left_x + 3, bottom_y),
                ] {
                    let coord = Coord::new(x, y);
                    coords.push(coord);
                }

                Rock {
                    coords: coords,
                    shape: shape,
                }
            }
            RockShape::Plus => {
                let mut coords = Vec::new();
                for (x, y) in vec![
                    (left_x, bottom_y + 1),
                    (left_x + 1, bottom_y),
                    (left_x + 1, bottom_y + 1),
                    (left_x + 1, bottom_y + 2),
                    (left_x + 2, bottom_y + 1),
                ] {
                    let coord = Coord::new(x, y);
                    coords.push(coord);
                }

                Rock {
                    coords: coords,
                    shape: shape,
                }
            }
            RockShape::LShaped => {
                let mut coords = Vec::new();
                for (x, y) in vec![
                    (left_x, bottom_y),
                    (left_x + 1, bottom_y),
                    (left_x + 2, bottom_y),
                    (left_x + 2, bottom_y + 1),
                    (left_x + 2, bottom_y + 2),
                ] {
                    let coord = Coord::new(x, y);
                    coords.push(coord);
                }

                Rock {
                    coords: coords,
                    shape: shape,
                }
            }
            RockShape::Bar => {
                let mut coords = Vec::new();
                for (x, y) in vec![
                    (left_x, bottom_y),
                    (left_x, bottom_y + 1),
                    (left_x, bottom_y + 2),
                    (left_x, bottom_y + 3),
                ] {
                    let coord = Coord::new(x, y);
                    coords.push(coord);
                }

                Rock {
                    coords: coords,
                    shape: shape,
                }
            }
            RockShape::Square => {
                let mut coords = Vec::new();
                for (x, y) in vec![
                    (left_x, bottom_y),
                    (left_x, bottom_y + 1),
                    (left_x + 1, bottom_y + 1),
                    (left_x + 1, bottom_y),
                ] {
                    let coord = Coord::new(x, y);
                    coords.push(coord);
                }

                Rock {
                    coords: coords,
                    shape: shape,
                }
            }
        }
    }

    fn pushed_by_jet(
        &mut self,
        jet_direction: JetDirection,
        existing: &HashSet<Coord>,
    ) -> HasMoved {
        // Generating the moved positions
        let potential_positions = match self
            .coords
            .iter()
            .map(|c| match jet_direction {
                JetDirection::Left => c.displace_left(),
                JetDirection::Right => c.displace_right(),
            })
            .collect::<Option<Vec<_>>>()
        {
            Some(x) => x,
            None => return None,
        };

        // Checking for any intersecting coordinates.
        let result = potential_positions
            .iter()
            .map(|x| match existing.contains(x) {
                true => None,
                false => Some(()),
            })
            .collect::<Option<()>>();

        match result {
            Some(_) => {
                self.coords = potential_positions;
                Some(())
            }
            None => None,
        }
    }

    fn fall_downwards(&mut self, existing: &HashSet<Coord>) -> HasMoved {
        // Generating the moved positions
        // If None, indicates that negative values have occured - Rock reaches an invalid position
        let potential_positions = match self
            .coords
            .iter()
            .map(|c| c.displace_down())
            .collect::<Option<Vec<_>>>()
        {
            Some(x) => x,
            None => return None,
        };

        // Checking for any intersecting coordinates.
        // If None, indicates that the new positions of the rock will intersect with an existing position.
        let result = potential_positions
            .iter()
            .map(|x| match existing.contains(x) {
                true => None,
                false => Some(()),
            })
            .collect::<Option<()>>();

        match result {
            Some(_) => {
                self.coords = potential_positions;
                Some(())
            }
            None => None,
        }
    }

    fn get_highest_point(&self) -> u32 {
        let result = self.coords.iter().map(|c| c.y).max().unwrap();
        result
    }
}

fn main() {
    // Configuring rock sequence
    let rock_sequence = [
        RockShape::Minus,
        RockShape::Plus,
        RockShape::LShaped,
        RockShape::Bar,
        RockShape::Square,
    ];
    let rock_seq_iter = rock_sequence.into_iter().cycle();
    let mut datum = 0;

    // Configuring jet stream
    let mut jet_stream_iter = ">>>><<<><>>><<<<>>><>>><>><<<<>>><>><<<<>><<<<>><<<>>>><>>>><<<<>>><>><<>>>><>>>><<>>>><<<<>>>><<<<>>><<>>><<<>>><<<<>><<>><>>>><<<>>><>><<<<>><<<>><<>>>><<<<>>>><<><>>><<<<><>><<<<>>>><><<<<>>><<<<>><<<<>>><<<>><<<>>><<>><>>>><<<>>><>>>><<<<>>>><<>>>><><>>>><<<><<<<><<<<>>><<>>><<<<>>><<<>><<<<>><>><<>>><<>>><<<<>>>><<>>><<<>>><<>>><<<>>><<<>><<>><<<>>>><>><<<<>>>><><>><>><<><<<><<<<>>><<<<>>><>><<<<><<<>>><<<<>><<>><<<<>>><<<>>><<>>>><<<>>><<<>>><<<<><<>><>><<<<><<<><<><<<><<<>>>><<<><<>>><<<<><<<<>>><>><>>><<<>><<>><<<<>>><<>>><><<<<>><<><<<<>><<<<>>><<<<>><>><<>><<<<>><<>>>><<<>><<<<>>><<<>>>><><<<>>>><<<>>>><<><<<<>>>><><<>>>><<>><<<<>>>><><<<>><><<<>>><><<<>><<<>>><>>><<<>>><<<<>>>><<<>>>><>>><>>>><<>><<><<<><<>>><<>><<<><<<<><<<>>>><<>>><<>><<>><><><<>>><>>>><<>><<<>>>><>>><><<>>>><>>>><>>><<<>><<<<>><<><<<<>>><<><<>>>><<<<>>><<<<>>>><<<<>><<><<<<>><>>>><<<<>><<<>>><<<>>>><>><>>>><>><<>>><<>>>><<<>><<>>>><<<<>>>><<><<<<>>><><<<><<<<>>><<>>>><>>>><>>>><<>><<>><<><<<><<<<>>><<<<><<<>>>><<>>><<<<>>><>>>><<>>>><<>><<>>><<>><<<<>><>><<<<>>>><<>>><<<>>>><>>>><<<><>>>><<>>>><<<>>><<><>>><>>><<<<><>><<<>><<><<<>><><>><><<>><<<>><<<>><<<>>><<>><<>><<<<>><>>><><<<><>><>><<<<>><<>>><<>>>><<<<>><<<<>>>><<<<><<<<>>><>>>><<<>>>><<<>><<><<<<>>><<<><<><<<>>>><<<<>><<>>>><>>>><<>><<<<>><<<<><>>>><><<<<>><>><<>>><><>><><><<<<>>>><>>><<>><<<>>><<<>><<>>>><<<><<<<><>><<>><>><>>><>>><<>>><<<<>><>>>><>>><<<<><<><<<<>><>><>>>><>><<>>><>><><<<><<<>>><<<>>><<<<><<>>>><><<<>>>><<>>><<<>>><<<>>><<<<><><<<>>>><<<<>>>><<<<>>><><<<<><>>>><<<><>>>><>>>><<<<>>>><<<>>>><<<<><<<>><<>>><<<>><>><>>><><<<<><<<<><<<><><<<<>><<>>>><>>><><<<<>>><>><<<>><<>>><<<><<><<>>>><<<<>>><<<>>>><<<>>><<><<<><<<<>>>><<>><>><<<>>>><<>>><>>><<<>>><<<<>>><><<<<>>>><<<>><<<><<>><<>>>><<<>><<>>>><<>><<<><>>><>><><<<<>>>><><<<<>>><<<>>>><<<<>>>><<>>>><<>>><>>>><<<>>>><<<>>><<<><<<<><>><<<<>>><<<<>>><<>><<<<>>><>>><<<<>>>><<>><<>>><<<<><<>>>><<>><<>>>><>>>><<<>>>><<<><>><>>>><<<<>><<>>>><<<>>><<<<>>>><><<>>><<<>>><<<>>><<>>>><<<>>><>>><<<<>><<><<<<>><<<<>>>><<<>>>><>>>><>>><<>>>><<><<<>><>><<<>>>><<<<><<<<><<<<>>><<<<><><<>><<>><<<<>>>><<>>>><>>><<>>>><<<<><>><<>>>><>><>>><<<>><<<<>><<<><<<>>>><<<>><<>>>><<<<><<<<>>><<<>><>>><<><<>>>><<<<><<<<>>>><<<>>>><<>>><>>><<<>><<><<<>>>><>>>><<<>>>><<<<>>><<<>>>><>>>><<<<>>>><<<>><<<<>>>><><<<>><<<<><<<><<>>>><<>>><>>><<<>>><<<<><<><<><<<><<<>>>><<<<><<<<><<><<>>><>><<>><<><<<>>>><<<><<<<>>><>>>><<<<>>>><<<<><<<>>>><<<>>>><>><<>>><>>>><<>>><<>>><>><<>><<>>>><<>>>><>><<><<<<>>><<>>><>>>><<<<>>><<<>>><<<><<<<><<>><>><<<<>>><<>>>><>>>><<<><><<>>><<><<<><<<><>>>><<><>><>><>><<<>>>><<<>><<>>>><<<>>><>>>><<<><<><<<<>>>><>><<><<<<><<<><<<>><><<<>><><<<<>>><<<<>><<<<><<<>>>><<<<>>>><<<>><<><>>>><<>>><>>><<<>>><>>>><<>><<<<>><<<<>>>><<>>><<<>><<<<>>><<<<>>>><>>>><<<<>><>>>><<<>><>>><<<<>>><<<<><<<<>>><<>><<<>><<<<>><<><<>>><<>>><<<>><<>>><<>>>><<<>>>><<<<>>>><<><>>>><<>><>><<<>>><<<>>>><>>>><<<>><<><><>>>><<><<<>><>><><<>><<<>>><<>><<<<><<>>><<<><<<<>>><<>><<<>>><<>>>><<<>><<<><<<<>>>><<<>>><<<<><<<<><>>>><<<>><<<>>>><<<>>>><><<<<>>>><>>>><<<>><>><<<<>><><<<>>><<<<>>>><>><<<<>><><<<>>>><<<>>>><<<<>>><>><<<<>><<<<>><<<<>>><<>><<<><>>><><<<<>>><<<>>>><<<>>>><<<>>><<<<>><<><<<<>>><<>>>><<<<>><<>>><>>><<<>>><<<<>>>><<>><<<>><<>>>><<>>><<<<>>><<>>>><><<<>>>><<<<>>><<<<>><<<>>><>><<>>><<>>>><<<>>><<>>>><>><>>>><<<<>>>><>>>><<<>><<<<>>>><<<<>>><>>><<<>>>><<><<><><<<><<<>>>><<>>><<>><<<<>><<>>><<><<<<>><<<>>><<>><>><<><<<<><>>><<<>>>><>>>><<<<><<<>><<>>><>><>><<>>><<<><<<<>>><>>>><<<>>>><<<>>>><>><><<<>>>><<<<><<<>>>><<<<>>><>>><<<<>>><>>>><<>>><<<>><<<<><<<><<>>><<<<><<>>>><<<>>>><<<>>><<>><<<<>><><<<<><<<>><<>>>><>>><<><<><<<><<>>>><<>><<>>>><<>>>><<<>>><<>><<>>><<<><>>>><<<>>><>>><>>><>><<>><>><<<<>>>><><<<<>>><><<<>>>><<<<>><<<<>>><<>>><<<>>>><<<<>>>><<<<><>>><<><<<>>>><<<>><<<<>>>><<<><<<>><<<>><<>>><<<>>><><><>>>><>>>><<>>><<<>>><>>>><<<>><>>><>>><<<<>><<><<<<><<><<<<>>>><<<>><><>>>><<<>>><<<>><<>>>><><<<<>><<<<>>>><<<><<>>><<>>><<<<>>>><<>><<>>><>>><<>>><<><>><<>><>>><<<<>><<<>>>><<<>><<<<>>>><>>><<<>>><<<<>>>><<<>><<><>>>><<<<><<>>><<>>>><<<<><>>><<<<>>>><><<<<>>><>><<<<>><<<<><<<>>><<<<><<>>>><<<<>>><<<><<><<<>><<<<><<<>><<<><>>><<<<>>>><>>><<>>>><<<>>><<<<>>>><<<<>>>><<<>><<>>><<>>><<<>>><<<<>><<<>>><<><<>>><<<<>>>><>>><<<>><<<>>><<><<<>>>><<<><<<<>>>><<<>><<<<>>><<>>>><<>><<<><><><<<><<<>>><<<>><><><<<><<<<>><>>>><<<>>><<<>><<<>>>><>><<>><>>>><<>>>><><>><<>>>><<<>>><<<>>>><<<>>>><<<><<><<<>><>>><<<<>>>><<>><<<<><>>><<>>>><<<<>>><<><<<>>>><<<><<<>>>><<<<>>><<<<>>><<<>><<>>>><<<>>>><<<><<><>>><<<<>>><<>>><<>>><<<><<<><<>><<<><>><<>><<<<><<>>>><>>><>>><>>><>><><<<>>><<<>>>><<>><>><<><<>>><<>>><><<<><<><<<<>>><>>>><<<<>>>><<>>>><<<>><<<>><><<<<>>><<<><<<<>>><>>>><<>>>><<>><<<>>><<<><<<<>>><<>>><<><>>>><><<<>>><<<>><><><<<><<<><<<<>>><<><>>><<<<>><<<<>>><<<><<<>>><<><<<><<<><<<<>><><>><><<<>>>><<>>><>><>>><><<<<>>>><<<<>>>><<<>>>><<<>>><<<<>>>><<<<><<<<>><>>>><<><<<<>>>><<>>><<><><<<<>><<<>>>><<<>>><<<><<>>>><<><<>>><<>><<>><<<>>>><<>>><<<<>>>><<<><>>>><>><<<>>>><><<<<>>>><<>>>><<<>>><<>>>><<<>>><<<<>><<>>><<<<>>><>>><<<><<>>><>><<>><<<<><<<<>>>><<<<>><>>><<<<>>>><<<<>>>><<<<>><<<<>>><<<>>><<<>>><<>><>>><<>>>><>>><>>>><>>><<<><<<>><<<><<<<><<<>><>><><<<<>>>><<>>><<<>>>><<><>>>><<<<>>><<><<>><<><<<><<<<>><>>>><><<<><<>><<<>><<<<>>>><>>>><<<<>><<<><<<<><<>>><<<<><<<>>>><<<>>>><<>><<<<><>><><><><<>>><<<><<>><<>>>><<<>>><>><<<>>><<<>>><<>>><>>><<<<>>>><<<<>><<<<>>><<<>><<<>>>><<><>><><<><<>><<<>>>><<<><<>>>><<><<<<>>><<>><<<>>><<><<>>><<<>><<><<>><<><<><<<>>>><>>><<<><<<>>>><><<<>><<<>>><<><>>><<<<>>>><>><<<><>>><<>>>><<<><<<>><>>>><<<><<<<><>><<<<>>><<<<>><><><<<>>>><<<>>><<>>><<<<>>><<<<>>><<<<>>><<<<>>><<>>>><<>>>><<<<>>><<>><><>>>><<>>><>>>><<<>><<<<>>>><<<<>>><<<>>>><>><<<<>>>><<<<><<<<>>>><><>><>>><<>><>>>><<<<>>><<<><<<><<<>>>><<<>>>><><><<<>>>><>>><<<>><><<<<><<<<>><<<>><><<>>><<<<><<>>><<>>><<>>><>>>><<<>><><<<>>><<<<>>><<<<>><><<<<>><<<>>>><<<<>>><<<>>><<><<>>>><>><<<><<<>>>><<<><<<<>>><>>>><<>>><<<<>><<<<>>>><<<>>><<<>>><<<>>><<<>>><<<>>><><><<>><>>><<<>>><<><>>>><<>>><<<<>><<><<<<>>><<<<><<>><>><<<>><<<<><<<<>>><<><>><<<<>><<<>>>><<<>>>><<<<>><<<>>><<>>>><<<<><<<<>>>><<<<><<<<>>>><>>><<<<><<<><<<>>><<<>>>><>><<<>><<>>>><>>><><<>>><<<<>>>><>>><<<>><<>><<<>><<<<>><<<<><<<<><<<<><<<<>><<>><<<><<>>><<<<>>><>><<><>>>><<<>>><<<<>>><<>>><<<><<<<>><<>><<>>>><<<<><>>>><<<><<>>>><<<<>>>><<<>><<>>>><>><<<<>>><<<<><<>><<<<>>>><><><<>><<>>><<<>><<<<><<<>>>><<<>>><<<<><<<<><>>>><><<<>><<<>><>>><<><><<<><<><>>>><<<<>>><<<<><<<<>>><<<<>>><<<<><>>>><<<>>>><<<>>>><<<<><<>>><<>>><<<<>>>><<<<>>><<>>>><><><<><<>><<>><<><<>>>><>><><<<>>>><<<>><<<>>>><<>>>><>>><<>><<<<>><>>><<<><<<<><<<><<<<>>><<<>><<>>>><<<>>>><<<<>>>><<<<>>><>>><<<>>><>>>><<<<>><<<<>>>><<>>>><<>><<<<>>>><<>><>>><<<>>><>>>><<><<<<>><<>>><<<>>><<<><<<<><<<<>><<>><>><>><<>><<>>><<<<>><<<>><<<<>><>><<<>>>><>>>><>>><<>>><><<<<>>>><<>><<<<>>>><<>><<<>>><<<><<<<>>><<>><<<>>>><<<>>>><<>>>><>><<<>><>>>><<>>><<>>>><<<>>>><<>>><>>><<<>>>><<>><<<<>>><<>><<<>><>><<<><<<><<<>><<<<>><<<<>>>><<>><><>>><<<>>><<<<><<<>>>><<<<>>><>><<<>>><<<<>>><<<>>><><<><<>><>>><<>>><<<<>>>><<<<>>>><<<>>>><><<<>>>><<><<<<>>>><<>><>>><><<<>>><<<>>><<<>>>><<<<>>><>>><<<<><<<>>>><<<>>>><<<>>><<<<><<>>><>><<<<>><>><<<<><<>>>><<<>>>><<<<>>>><<>>><><<<>>><<<>><<<<>>>><<<<>>><<>>><<<>>>><>>>><<<>>><<>><<<<>><<<>><<<>><<<<>><<<>><<><<><>><><><<>>>><<>>><>>>><>><><>><><<>>><<>>>><>><<<<>><><<<><<<<>>><<>>>><<<<>>>><><>><<>>>><<><<<>>><>><<<<>>><<>><<><<>>>><<<<>>><<<>>><<<<><<<><<<><<<><>><<<>><<<><<<<><<<>><<><<<<>><<>><>>><<>>><>>>><><<>><<>><<>>>><>>><<<<>>>><<<>><>><<<>>><<<<>><<>>><<<<>>>><<<<>><<<><>><<><<<>>><<<<>>><<<>>><<>><<<>>><>>>><<<<>><<<<>><<>>>><<<>>>><<<><<<>><>>>><<><<<<>>>><<<><>>>><<>>><<<>>><<>>>><<<>>>><<<><<<>><<<><<>>><<<<>>><<><<<<>><<<><<<<>>>><<>>>><<<>><<>><<<>>>><<<><<<><<<<>>>><>>><<<>>><<<<>>><<<<><<<>>>><<<<>><<>><<><<<>>><<<>>><<<>><>>>><>><<><<<<>>>><>><><><<<<>><>><<<<>><><<<>>><<<<><>>><><>>><<<<>>><<>>><<<>>>><<<<>>><<<<><<<>>>><<>>>><>><<<>>><<<<>><<>>><<<<>>>><<<<><<>>>><<<>><<<>>><<<<><<>>><<>>><>>>><<<<>>><<<><<<>>>><>><<<>><<<>><><<<<><<>>>><<>><>>><<>><<<<>>>><<>><>>><<<<>><><<<<>><<<<>>><<<<>>>><<<><<>>><<<>><<<>>>><<>><<>><>>><<>>>><><<>><<>>>><<>>><>>><<<<>><<>>><<<>>><<><<<<>><<<><<<<>>>><<<>>><<<<>>><<<<>>><<<>>><<<<>>>><>>><<<<>>><<<>>>><<><<<<>>><<>>>><<<>>>><<<<>>>><<>>>><<><<<<>><><<<>>>><>>>><<>>>><><<<>>><<>>>><><<<>><<<>>><<<>>>><>>>><>>><<>>>><<<>>>><<>>><<<<><<<<>><>><<<>>>><<><<<>>><<<>><<>><<<<>>>><<><<<<><<>><<>>><>><<<>>><><<<>>>><<><<<>>>><<<><<<>><>>>><>>>><<<>>>><>>><>>><<<><<<<>>><<<<><<<><<>>>><<<>>>><<<<><<<><<<>>>><<<>>>><<>>>><<<><<>>>><><<>><<<><<<>>><<<>><<<<><<><<<<><<<>>>><<<>><<><<>><<><<<>><<>>>><<<>><<<<>><<<>>><>>>><<<<>>>><<>>>><>>>><<>><<>><<<><<<<>><<>>><<<<>>><<>>>><<><<<<><<<>>><<<<><<<>>><<>><<<<>>><<<<>>><<<<>>>><<>><<<<>>>><<<<>><<<<>>><<<<>>><<<>>>><<>><<<<>>><<><<<<>><<>>>><<<<><<>>>><>>>><>>><>>>><<<><<<<><<>><<<<>><<<>>>><<<<>>>><<>><<>>><<<><<<>><><<<<><<<<>>><<<<>>><<<>>><>><<><<>><<<>>>><<<<>><>><<><<<<>>><<<>>><<<<>><<>>>><>><>>>><<<>>><<<<>>><<><<>><<<>><<<><>>><><<>>><<<>>><<<>>><<<<>>>><<<>><<<>><<<>>><<<<>>>><<<><<>>><>>><>><>>>><<<>><<<><<<>>>><<<<><<<>><>>><>><<<><><<><<<>>><>><<<<>><<<<>>>><<>><>><<<<>><>><<<<>>><<<<>><>>><>>>><<<<>>>><<<><<<>>><>>>><<<<>>>><<<<>><<<><<<<>>>><<<>>><<><<<>>><<<>>>><>><<><<<><<<<>><<<>>><<<>>><<<>>><<<>><<<<>>>><<<<>><<>>><>>><<<><<>>><<<<><<<>>><<<<>>>><<<<><>><<>>>><<<>><>>><<><<<<>>><><<<><<>><<<<><<<>>>><><<><<>>><<>>><>>><>>><>>>><<><><><<>>>><>>>><<<<>><<<<>>>><><<<<>>><<<><<<<><><<>>><<<<>>><<<<>><<<<>>>><<><<<>>><<<<>>>><<<><<<<><>>><<<>>><>>>><<<>><<<<>>>><<<<>><<<><<<>>><><<>>><<>>><>>><<<<><<<>>><<<<><<<>>><<>>><<<><<>><><<>>><<<<>>><<<<>>>><<>><<<<><><<<><<<<>>>><<><>><<>>>><>>><<>>>><<><<<>>>><<<<>><<<><<>>>><<>>><<>><<<>>><<><<<<>>><<<<>>>><<<<><<<>><>>><<<>>>><<<><<<<><<>>><<>><>>>><>>><<<<>>>><<<<>><><>>>><<>>><<><<<>>><<<<><<<<>>><>>>><<<<><<<><<<<>>>><<>><<<<>>>><<<>><<>><>>><<<<>>>><>>><>>><<><>><<<><>><<<<>>>><><<>><<<>><>>><><<>>><<<<>><<><<<<><>>><<<><<<<>>".chars().cycle();

    // Configuring existing occupied coordinates
    let mut existing = HashSet::new();

    for (i, current_rock_shape) in rock_seq_iter.enumerate() {
        // Creating the current rock
        let mut current_rock = Rock::new(current_rock_shape, datum);

        let mut current_jet_index = 0;

        // Modelling the rock getting blown by the wind & falling
        loop {
            let jet_direction = match jet_stream_iter.next() {
                Some(c) => match c {
                    '>' => JetDirection::Right,
                    '<' => JetDirection::Left,
                    _ => unreachable!(),
                },
                None => unreachable!(),
            };
            match current_rock.pushed_by_jet(jet_direction, &existing) {
                Some(_) => println!("Rock was blown sideways!"),
                None => println!("Rock blocked from moving sideways!"),
            };
            match current_rock.fall_downwards(&existing) {
                Some(_) => println!("Rock continues to fall downwards!"),
                None => {
                    // Rock has come to a stop
                    println!("Rock has stopped!");
                    let rock_highest_point = current_rock.get_highest_point();
                    existing.extend(current_rock.coords.into_iter()); // Adding the stopped coordinates into the existing coordinates
                    if rock_highest_point > datum {
                        datum = rock_highest_point
                    }
                    break;
                }
            }
            current_jet_index += 1;
        }

        if i + 1 == 2022 {
            println!("Result: {}", datum);
            break;
        }
    }
}
